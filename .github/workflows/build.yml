# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Push Docker Image

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
        
    - name: Set up JDK 17
      uses: actions/setup-java@v4.0.0
      with:
        java-version: '17'
        distribution: 'adopt'
        cache: maven
        
    - name: Cache SonarQube packages
      uses: actions/cache@v3.3.2
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v3.3.2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Cache Docker layers
      id: docker-cache
      uses: actions/cache@v3.3.2
      with:
        path: |
          /var/lib/docker
        key: ${{ runner.os }}-${{ hashFiles('**/*.lock') }}
        
    - name: Build and analyze
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GHA_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO_NAME }}:${{ github.sha }}'
        format: 'table'
        ignore-unfixed: true
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'

    - name: Store variable as secret
      run: |
        echo ${{ steps.login-ecr.outputs.registry }} | tee REGISTRY
        github-actions set-secret name=REGISTRY file=REGISTRY
          
    # - name: Save variable to file
    #   run: echo "export REGISTRY=${{ steps.login-ecr.outputs.registry }}" > variable.sh
      
    # - name: Upload artifact
    #   uses: actions/upload-artifact@v3.1.3
    #   with:
    #     name: shared-artifact
    #     path: variable.sh

    # - name: SSH into EC2 and deploy Docker container
    #   env:
    #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     REPOSITORY: ${{ secrets.ECR_REPO_NAME }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     printenv
    #     mkdir ~/.ssh
    #     echo "${{ secrets.PEM_FILE }}" > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
    #     ssh-keyscan -t rsa ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
    #     ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
    #     aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY
    #     if docker ps -q --filter "name=${{ secrets.CONTAINER_NAME }}" 2>/dev/null ; then
    #       docker stop "${{ secrets.CONTAINER_NAME }}"
    #       docker rm "${{ secrets.CONTAINER_NAME }}"
    #       docker run -d -p "${{ secrets.CONTAINER_PORT_MAPPING }}" --name "${{ secrets.CONTAINER_NAME }}" "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
    #     else
    #       docker run -d -p "${{ secrets.CONTAINER_PORT_MAPPING }}" --name "${{ secrets.CONTAINER_NAME }}" "$REGISTRY/$REPOSITORY:$IMAGE_TAG"
    #     fi     
    #     "

  
      
